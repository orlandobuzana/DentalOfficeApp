version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smilecare-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: smilecare_dental
      POSTGRES_USER: dental_user
      POSTGRES_PASSWORD: dental_secure_pass_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dental_user -d smilecare_dental"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smilecare-network

  # SmileCare Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: smilecare-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://dental_user:dental_secure_pass_123@postgres:5432/smilecare_dental
      SESSION_SECRET: your-super-secure-session-secret-change-in-production
      PORT: 5000
      # OAuth credentials (optional - add when ready)
      # GOOGLE_CLIENT_ID: your-google-client-id
      # GOOGLE_CLIENT_SECRET: your-google-client-secret
      # APPLE_TEAM_ID: your-apple-team-id
      # APPLE_CLIENT_ID: your-apple-client-id
      # APPLE_KEY_ID: your-apple-key-id
      # APPLE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nYour key here\n-----END PRIVATE KEY-----"
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount uploads directory for persistent file storage
      - app_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "const http=require('http');const req=http.request({hostname:'localhost',port:5000,path:'/health',timeout:2000},r=>process.exit(r.statusCode===200?0:1));req.on('error',()=>process.exit(1));req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smilecare-network

  # Optional: Redis for session storage (production scale)
  # redis:
  #   image: redis:7-alpine
  #   container_name: smilecare-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - smilecare-network

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  # redis_data:
  #   driver: local

networks:
  smilecare-network:
    driver: bridge